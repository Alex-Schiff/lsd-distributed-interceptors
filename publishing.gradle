bootJar {
    enabled = false
}

jar {
    enabled = true
    classifier = ""
}

tasks.register('sourcesJar', Jar) {
    dependsOn classes
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

tasks.register('javadocJar', Jar) {
    dependsOn(dokkaJavadoc)
    archiveClassifier = 'javadoc'
    from dokkaHtml.outputDirectory
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = "$group"
            artifactId = 'lsd-distributed-interceptors'
            version = "$version"

            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'lsd-distributed-interceptors'
                description = 'A set of interceptors gathering information from distributed sources for the LSD library.'
                url = 'https://github.com/lsd-consulting/lsd-distributed-interceptors'
                licenses {
                    license {
                        name = "The Apache Software License, Version 2.0"
                        url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                        distribution = "repo"
                    }
                }
                developers {
                    developer {
                        name = "Lukasz"
                        email = "lukasz.gryzbon@gmail.com"
                        organization = 'Integreety Ltd.'
                        organizationUrl = 'https://www.integreety.co.uk'
                    }
                    developer {
                        name = "Nick"
                        email = "nicholas.mcdowall@gmail.com"
                        organization = 'NKM IT Solutions'
                        organizationUrl = 'https://github.com/nickmcdowall'
                    }
                }
                scm {
                    url = "https://github.com/lsd-consulting/lsd-distributed-interceptors.git"
                }
            }
            repositories {
                maven {
                    name = 'sonatype'
                    url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                    credentials(PasswordCredentials)
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {  //only for users registered in Sonatype after 24 Feb 2021
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

signing {
    if (project.findProperty("signingKey")) {
        // Use in-memory ascii-armored keys
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(signingKey as String, signingPassword as String)
        sign publishing.publications.mavenJava
    } else {
        // Use signing properties in ~/.gradle/gradle.properties
        sign publishing.publications.mavenJava
    }
}
