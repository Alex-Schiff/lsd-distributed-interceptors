lsd.dist.obfuscator.sensitiveHeaders=Authorization,JWT
lsd.dist.threadPool.size=2
lsd.dist.connectionString=http://localhost:${server.wiremock.port}

server.port=8079
server.wiremock.port=8070

info.app.name=Test App

# spring cloud stream
spring.cloud.function.definition=inputOutputHandlerFunction
spring.cloud.stream.bindings.inputOutputHandlerFunction-in-0.binder=rabbit
spring.cloud.stream.bindings.inputOutputHandlerFunction-in-0.destination=input.fanout
spring.cloud.stream.bindings.inputOutputHandlerFunction-in-0.group=input.queue
spring.cloud.stream.rabbit.bindings.inputOutputHandlerFunction-in-0.consumer.bindQueue=true
spring.cloud.stream.rabbit.bindings.inputOutputHandlerFunction-in-0.consumer.declareExchange=true
spring.cloud.stream.rabbit.bindings.inputOutputHandlerFunction-in-0.consumer.exchangeType=fanout
spring.cloud.stream.rabbit.bindings.inputOutputHandlerFunction-in-0.consumer.queueNameGroupOnly=true
spring.cloud.stream.rabbit.bindings.inputOutputHandlerFunction-in-0.consumer.enable-batching=true
spring.cloud.stream.rabbit.bindings.inputOutputHandlerFunction-in-0.consumer.batch-size=250
spring.cloud.stream.rabbit.bindings.inputOutputHandlerFunction-in-0.consumer.auto-bind-dlq=true
spring.cloud.stream.rabbit.bindings.inputOutputHandlerFunction-in-0.consumer.republish-to-dlq=true
spring.cloud.stream.rabbit.bindings.inputOutputHandlerFunction-in-0.consumer.dead-letter-exchange=inventory-publisher-edge.vehicle-order-update.direct
spring.cloud.stream.rabbit.bindings.inputOutputHandlerFunction-in-0.consumer.dead-letter-routing-key=inventory-update.inventory-publisher-edge.vehicle-order-update.primary.dead-letter
spring.cloud.stream.rabbit.bindings.inputOutputHandlerFunction-in-0.consumer.dead-letter-queue-name=inventory-update.inventory-publisher-edge.vehicle-order-update.primary.dead-letter

spring.cloud.stream.bindings.inputOutputHandlerFunction-out-0.binder=kafka
spring.cloud.stream.kafka.bindings.inputOutputHandlerFunction-out-0.producer.sync=true

spring.cloud.stream.bindings.inputOutputHandlerFunction-out-0.destination=output.topic
spring.cloud.stream.bindings.inputOutputHandlerFunction-out-0.group=output.topic

spring.cloud.stream.kafka.binder.autoCreateTopics=true
spring.cloud.stream.kafka.binder.configuration.max.poll.records=50

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer

spring.kafka.bootstrap-servers=localhost:9093
spring.cloud.stream.kafka.binder.brokers=localhost:9093

management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
logging.level.org.springframework.boot.autoconfigure=ERROR

spring.kafka.consumer.properties.spring.json.trusted.packages=*
